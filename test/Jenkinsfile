#!groovy

@Library('PACE-shared-lib') import pace.common.PipeLineInfo

pli = new PipeLineInfo(env.JOB_BASE_NAME)

def setGitHubBuildStatus(String status, String message) {
    script {
        withCredentials([string(credentialsId: 'GitHub_API_Token',
                variable: 'api_token')]) {
            sh """
                curl -H "Authorization: token ${api_token}" \
                --request POST \
                --data '{ \
                    "state": "${status}", \
                    "description": "${message} on ${env.JOB_BASE_NAME}", \
                    "target_url": "$BUILD_URL", \
                    "context": "${env.JOB_BASE_NAME}" \
                }' \
                https://api.github.com/repos/pace-neutrons/horace-euphonic-interface/statuses/${env.GIT_COMMIT}
            """
        }
    }
}

def getGitCommitAuthorEmail() {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        return sh(
            script: """
                echo "\$(\\
                    curl -s -H "Authorization: token ${api_token}" \\
                    --request GET https://api.github.com/repos/pace-neutrons/horace-euphonic-interface/commits/${env.GIT_COMMIT} |  jq '.commit.author.email' | tr -d '"'\\
                )"
            """,
            returnStdout: true
        )
    }
}

def getGitCommitAuthorEmailWindows() {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        return powershell(
            script: """
                [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
                \$commit_details = Invoke-RestMethod -URI "https://api.github.com/repos/pace-neutrons/horace-euphonic-interface/commits/${env.GIT_COMMIT}" \
                    -Headers @{Authorization = "token ${api_token}"} \
                    -Method 'GET' \
                    -ContentType "application/json"
                \$commit_author_email = \$commit_details.commit.author.email
                echo "\$commit_author_email"
            """,
            returnStdout: true
        )
    }
}

properties([
    parameters([
        string(
            defaultValue: '',
            description: 'The version of Matlab to use e.g. 2019b.',
            name: 'MATLAB_VERSION',
            trim: true
        ),
        string(
            defaultValue: utilities.get_agent(pli.os),
            description: 'The agent to execute the pipeline on.',
            name: 'AGENT',
            trim: true
        )
    ])
])

pipeline {

    agent { label env.AGENT }

    environment {
        MATLAB_VERSION = utilities.get_param('MATLAB_VERSION', pli.matlab_release.replace('R', ''))
        CONDA_ENV_NAME = "py36_horace_euphonic_interface_${env.MATLAB_VERSION}"
    }

    triggers {
        GenericTrigger(
             genericVariables: [
                [key: 'ref', value: '$.ref']
             ],

             causeString: 'Triggered on $ref',

             token: 'GitHub_API_Token',

             printContributedVariables: true,
             printPostContent: true,

             silentResponse: false,

             regexpFilterText: '$ref',
             regexpFilterExpression: 'refs/head/' + env.GIT_BRANCH
        )
        pollSCM('')
    }

    stages {

        stage("Notify") {
            steps {
                script {
                    if (env.AGENT == 'sl7') {
                        setGitHubBuildStatus("pending", "Starting")
                    }
                }
            }
        }

        stage("Get-PACE-jenkins-shared-library") {
            steps {
                dir('PACE-jenkins-shared-library') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "refs/heads/main"]],
                        extensions: [[$class: 'WipeWorkspace']],
                        userRemoteConfigs: [[url: 'https://github.com/pace-neutrons/PACE-jenkins-shared-library.git']]
                    ])
                }
            }
        }

        stage("Create mltbx") {
            steps {
                script {
                    if (isUnix()) {
                        sh 'git submodule update --init'
                    } else {
                        bat 'git submodule update --init'
                    }
                    if (isUnix()) {
                        sh """
                            module load conda/3 &&
                            module load matlab/R\$MATLAB_VERSION &&
                            conda create --name \$CONDA_ENV_NAME python=3.6 -y &&
                            conda activate \$CONDA_ENV_NAME &&
                            python -m pip install --upgrade pip &&
                            python -m pip install requests &&
                            python create_mltbx.py
                        """
                    } else {
                        powershell 'PACE-jenkins-shared-library/powershell_scripts/create_conda_environment.ps1'
                        bat """
                            setx PATH "%PATH%;C:\\Programming\\MatlabR%MATLAB_VERSION%\\bin\\"
                            CALL "%VS2019_VCVARSALL%" x86_amd64
                            CALL conda activate %CONDA_ENV_NAME%
                            python -m pip install --upgrade pip
                            python -m pip install requests
                            python create_mltbx.py
                        """
                    }
                }
            }
        }
        stage("Install Euphonic and run tests") {
            steps {
                script {
                    dir('test') {
                        if (isUnix()) {
                            sh """
                                module load conda/3 &&
                                module load gcc &&
                                conda activate \$CONDA_ENV_NAME &&
                                export PYTHON_EX_PATH=`which python` &&
                                module load matlab/R\$MATLAB_VERSION &&
                                conda install xorg-x11-server-xvfb-cos7-x86_64 --channel conda-forge &&
                                python -m pip install numpy &&
                                python ../euphonic_sqw_models/apply_requirements.py &&
                                xvfb-run -e /dev/stderr matlab -nosplash -batch "set_up_dependencies; run_tests('not', 'phonopy_reader')"
                                python ../euphonic_sqw_models/apply_requirements.py --extras phonopy_reader &&
                                xvfb-run -e /dev/stderr matlab -nosplash -batch "set_up_dependencies; run_tests('phonopy_reader')"
                            """
                        } else {
                            bat """
                                CALL "%VS2019_VCVARSALL%" x86_amd64
                                CALL conda activate %CONDA_ENV_NAME%
                                python -m pip install numpy
                                python ../euphonic_sqw_models/apply_requirements.py
                            """
                            powershell '../PACE-jenkins-shared-library/powershell_scripts/execute_matlab_command.ps1 "set_up_dependencies; run_tests(\'not\', \'phonopy_reader\')"'
                            bat """
                                CALL "%VS2019_VCVARSALL%" x86_amd64
                                CALL conda activate %CONDA_ENV_NAME%
                                python ../euphonic_sqw_models/apply_requirements.py --extras phonopy_reader
                            """
                            powershell '../PACE-jenkins-shared-library/powershell_scripts/execute_matlab_command.ps1 "set_up_dependencies; run_tests(\'phonopy_reader\')"'
                        }
                    }
                }
            }
        }
    }
    post {

        success {
            script {
                if (env.AGENT == 'sl7') {
                    setGitHubBuildStatus("success", "Successful")
                }
            }
        }
        unsuccessful {
            script {
                if (env.AGENT == 'sl7') {
                    setGitHubBuildStatus("failure", "Unsuccessful")
                }
            }
            script {
                def email
                if (isUnix()) {
                    email = getGitCommitAuthorEmail()
                } else {
                    email = getGitCommitAuthorEmailWindows()
                }
                mail (
                    to: "${email}",
                    subject: "Failed pipeline: ${env.JOB_BASE_NAME}",
                    body: "See ${env.BUILD_URL}"
                )
            }
        }
        // Always publish toolbox - useful for debugging and integration testing
        always {
            script {
                archiveArtifacts artifacts: 'mltbx/horace_euphonic_interface.mltbx'
            }
        }
        cleanup {
            deleteDir()
        }

    }
}
